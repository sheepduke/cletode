#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(clop jsown) :silent t))

(defpackage :ros.script.decoder.3848652702
  (:use :cl)
  (:export
   #:print))
(in-package :ros.script.decoder.3848652702)

(defmethod jsown:to-json ((timestamp local-time:timestamp))
  (format nil "\"~a\"" (local-time:to-rfc3339-timestring timestamp)))

(defun make-typed-value (type value)
  (jsown:new-js
    ("type" (str:downcase type))
    ("value" (if (stringp value)
                 value
                 (format nil "~a" value)))))

(defun parse-value (type value)
  (when (member type '(:datetime :datetime-local :date-local :time-local))
    (local-time:parse-timestring (str:replace-first " " "T" value)))
  (if (eql type :float)
      (make-typed-value type (format nil "~f" value))
      (make-typed-value type value)))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let* ((clop.config:*value-true* "true")
         (clop.config:*value-false* "false")
         (clop.config:*value-parser* (lambda (type value)
                                       (parse-value type value)))
         (clop.config:*value--nan* "nan")
         (clop.config:*value-+nan* "nan")
         (clop.config:*value-+inf* "+inf")
         (clop.config:*value--inf* "-inf")
         (chars (loop for char = (read-char *standard-input* nil nil)
                      until (null char)
                      collect char))
         (input (coerce chars 'string)))
    (handler-case (let* ((object (clop:parse input :style :jsown))
                         (json (jsown:to-json object)))
                    (format t "~a" json))
      (error (err) (format t "~a" err)
        (uiop:quit 1)))))

;; ----------------------------------------------------------------------------

;;; vim: set ft=lisp lisp:

;; (let* ((clop.config:*value-true* "true")
;;        (clop.config:*value-false* "false")
;;        (clop.config:*value-parser* (lambda (type value)
;;                                      (parse-value type value)))
;;        (input (uiop:read-file-string
;;                "~/workspace/toml-test/tests/valid/newline-crlf.toml")))
;;   (jsown:to-json
;;    (clop:parse input :style :jsown)))
